diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..fb47480
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,22 @@
+# configure
+
+Makefile
+bc/.deps/
+bc/Makefile
+config.h
+config.log
+config.status
+dc/.deps/
+dc/Makefile
+doc/Makefile
+doc/texi-ver.incl
+lib/.deps/
+lib/Makefile
+stamp-h1
+
+# build
+bc/bc
+bc/libmath.h
+dc/dc
+*.o
+*.a
diff --git a/bc/fix-libmath_h b/bc/fix-libmath_h
index f973a8c..042c78b 100755
--- a/bc/fix-libmath_h
+++ b/bc/fix-libmath_h
@@ -1,9 +1,9 @@
-ed libmath.h <<EOS-EOS
-1,1s/^/{"/
-1,\$s/\$/",/
-2,\$s/^/"/
-\$,\$d
-\$,\$s/,\$/,0}/
-w
-q
-EOS-EOS
+#! /bin/bash
+sed -e '1   s/^/{"/' \
+    -e     's/$/",/' \
+    -e '2,$ s/^/"/'  \
+    -e   '$ d'       \
+    -i libmath.h
+
+sed -e '$ s/$/0}/' \
+    -i libmath.h
diff --git a/bc/storage.c b/bc/storage.c
index c79db82..f3c8854 100644
--- a/bc/storage.c
+++ b/bc/storage.c
@@ -1018,6 +1018,7 @@ process_params (program_counter *progctr, int func)
 	
 		/* Compute source index and make sure some structure exists. */
 		ix = (int) bc_num2long (ex_stack->s_num);
+        ix = (int) bc_baseconvert (ix, 10, o_base);
 		(void) get_array_num (ix, 0);    
 	
 		/* Push a new array and Compute Destination index */
diff --git a/configure b/configure
index 1fa4af4..9c6151d 100755
--- a/configure
+++ b/configure
@@ -5288,7 +5288,7 @@ case $bcle-$bcrl-$LEX in
    ?-?-flex)
 	LEX="flex -I -8" ;;
    ?-y-*)
-	as_fn_error $? "readline works only with flex." "$LINENO" 5 ;;
+	: ;; # as_fn_error $? "readline works only with flex." "$LINENO" 5 ;;
 esac
 
 case $LEX-`uname -s` in
diff --git a/h/number.h b/h/number.h
index abf6332..ec74d7a 100644
--- a/h/number.h
+++ b/h/number.h
@@ -140,4 +140,7 @@ void bc_out_num (bc_num num, int o_base, void (* out_char)(int),
 			     int leading_zero);
 
 void bc_out_long (long val, int size, int space, void (*out_char)(int));
+
+/* recursive base conversion added to util.c */
+long bc_baseconvert(long num, int ibase, int obase);
 #endif
diff --git a/lib/number.c b/lib/number.c
index f394e92..005f64d 100644
--- a/lib/number.c
+++ b/lib/number.c
@@ -1703,6 +1703,15 @@ bc_str2num (bc_num *num, char *str, int scale)
     }
 }
 
+/* recursive base conversion */
+long
+bc_baseconvert(long num, int ibase, int obase){
+  if(num == 0 || num == 1 || (ibase == obase))
+    return num;
+
+  return (num % obase) + (ibase * bc_baseconvert(num / obase, ibase, obase));
+}
+
 /* Debugging routines */
 
 #ifdef DEBUG
