#!/usr/bin/bc

# functions for calculating roots

# accepts a number (x), square or cubic root (r) and mod (p)
# returns roots of x in array the passed array
# *roots[0] will hold the number of roots returned
define void rootmod_api(x, r, p, *roots[]){

    auto s, q, z, c, ret[], rootvals[], quiet;

    roots[0] = 0;
    rootvals[0] = 0;

    set_root_values(r, p, rootvals[]);
    s = rootvals[1];
    q = rootvals[2];
    z = rootvals[0];
    c = rootvals[3];

    # print "s : ", s, " q : ", q, " z : ", z, " c : ", c, "\n";
    tonelli_shanks_api(x, r, s, q, c, p, ret[]);

    if ( r % 2 == 0 ){

        roots[0] = 2;
        roots[1] = ret[0]
        roots[2] = mod( -ret[0], p);
    } else {

        roots[0] = 3;
        roots[1] = ret[0];
        roots[2] = mod(ret[0] * c, p);
        roots[3] = mod(ret[0] * invmod(c, p), p);
    }
}

# computes square or cube roots from a number (n)
# prints the results and returns the first root returned by the api
define rootmod(n, r, p){

    auto ret[];

    if ( ! is_residue(n, r, p) ){
        print "\n# *** Not a residue of pow ", r, "\n";
        return 0
    }

    rootmod_api(n, r, p, ret[]);

    print "\n# rootmod()\n#\n";
    for ( i=1; i<=ret[0]; i++){
        print "# r", i, " = ", ret[i], "\n";
    }

    return ret[1];
}
