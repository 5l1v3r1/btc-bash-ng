#!/usr/bin/bc

# basic contract hash functions

contracthash_sign_api(k0, tweak, z, d, *contract[]){

    auto k1, s, nonce[], sig[];

    ecmul_api(k0, curve_gx, curve_gy, curve_n, curve_p, nonce[]);
    k1 = mod(k0 + tweak, curve_n);
    ecdsa_sign(k1, z, d, sig[]);
    contract[0] = nonce[0];
    contract[1] = nonce[1];
    contract[2] = sig[0];
    contract[3] = sig[1];
}

contracthash_verify_api(z, x, y, r, s, n_x, n_y, tweak){

    auto tw_pt[], cmt_pt[], r_ver;

    ecmul_api(tweak, curve_gx, curve_gy, curve_n, curve_p, tw_pt[]);
    ecadd_api(tw_pt[0], tw_pt[1], n_x, n_y, curve_p, cmt_pt[])
    r_ver = ecdsa_verify_api(z, x, y, r, s, curve_gx, curve_gy, curve_p, curve_n);
    return (r != 0) && (r_ver == cmt_pt[0]);
}

# used for recovering k and d from contracthash nonce reuse

define contracthash_punish_api(r1, s1, tw1, r2, s2, tw2, z1, n){

    auto r1i;

    r1i = invmod(r1, n);
    return mod( (z1*(1 - r1i*r2) + s2*(tw1 - tw2)) * invmod(s2 - s1*r1i*r2, n), n)
}

define void contracthash_punish(r1, s1, tw1, r2, s2, tw2, z1, n){

    auto k1, k2, k3, k4, d1, d2 ,d3, d4;

    k1 = contracthash_punish_api(r1, s1, tw1, r2, s2, tw2, z1, n);
    k2 = contracthash_punish_api(r1, -s1, tw1, r2, s2, tw2, z1, n);
    k3 = contracthash_punish_api(r1, s1, tw1, r2, -s2, tw2, z1, n);
    k4 = contracthash_punish_api(r1, -s1, tw1, r2, -s2, tw2, z1, n);

    d1 = mod(mod((s1*k1)-z1,n) * invmod(r1,n),n);
    d2 = mod(mod((s1*k2)-z1,n) * invmod(r1,n),n);
    d3 = mod(mod((s1*k3)-z1,n) * invmod(r1,n),n);
    d4 = mod(mod((s1*k4)-z1,n) * invmod(r1,n),n);

    print "\npossible k values :\n\n";
    k1; k2; k3; k4;

    print "\npossible d values :\n\n";
    d1; d2; d3; d4;
}
